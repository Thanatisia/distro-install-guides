#
# Installation Guide
#

Table of Contents:
	1. Set Keyboard Layout
	2. Verify Boot Mode
	3. Update System Clock
	4. Prepare Disks
	5. Mount Disks
	6. Select the Mirrors
	7. Install Essential Packages
	8. Generate File Systems Table (Fstab)
	9. Chroot
	10. Post-Installation TODO
	11. Finale

# [Pre-Requisite]

# -- User design : Partitioning and File Systems
# NOTE:
# 1. Reference: https://askubuntu.com/questions/118199/how-do-i-change-file-permissions-on-a-fat32-drive#118200
#		* The /home partition needs to be ext4, FAT32 formatted drives do not support file permissions. The permissions for everything are determined by how the drive is mounted.
#		* So, you can change the permissions on all the files on the drive by mounting it differently, but not dynamically like you are describing.
# 2. Boot Record Types
#		* Master boot Record (MSDOS)
#		* GPT Partition Table
#		* UEFI Boot

[MBR (MSDOS)]
Device Specifications:
	Device ID: 
	Device Type: MicroSD
	Device Name: /dev/sdb
	Device Size: 51200MiB
	Device UUID: 
	Device Boot: MSDOS

Partition Design:
	Partition Schema:
	==================================================================================================================
	| ROW_ID, device, partition_name, mount_path, partition_format, partition_type, start_size, end_size, other_opts |
	==================================================================================================================
	1, /dev/sdX1, Boot, /mnt/boot, primary, ext4, 0%,	1024MiB, Bootable
	2, /dev/sdX2, Root, /mnt     , primary, ext4, 1024MiB,	32768MiB
	3, /dev/sdX3, Home, /mnt/home, primary, ext4, 32768MiB, 100%

		
#
# BIOS / MBR (Non-UEFI)
#

# -- Network
	```
	# To get network
	ip a s
	ip link
	```

# If no internet, temporary fix [1]: dhcpcd
	sudo dhcpcd

# To Test
	ping 8.8.8.8

#=============================#
# Step 1: Set Keyboard Layout #
#=============================#

- Get Keyboard layouts
	ls /usr/share/kbd/keymaps/**/*.map.gz

- IF Changing keyboard layout
	loadkeys <layout_code>

#==========================#
# Step 2: Verify Boot Mode #
#==========================#
```
i.e. UEFIF/BIOS
```

- List efivars directory
	```
	if it displays 
		- without error - booted in UEFI mode;  
		- with error - booted in BIOS or CSM mode
	```
	ls /sys/firmware/efi/efivars 

#=============================#
# Step 3: Update System Clock #
#=============================#

- Sync NTP
	timedatectl set-ntp true

- To check system clock
	timedatectl status

#=======================#
# Step 4: Prepare Disks #
#=======================#
```
Partition the Disks
NOTE: Please refer to [Pre-Requisite] for your design
```

- Verify disk block
	```
	Note the device name
	- /dev/sdX
	i.e.
		/dev/sdb
		/dev/sdc
	```
	lsblk / sudo fdisk -l

- Prepare Disks
	```
	NOTES:
		> Multiple Tools for Partitioning
		parted
			Syntax: 
				- Create Device Label (aka Reformat)
					parted [device_name] mklabel [device_label]

				- Creating new partition
					parted [device_name] mkpart [partition_type] [partition_fileType] [start_size] [end_size]

				- Formatting file system/partition
					mkfs.{filetype} {options} [device_name](partition_number)

				- Formatting Swap
					mkswap [device_name](partition_number)

				- Set settings to partition
					parted [device_name] set [partition_number] {settings}

					settings:
						boot {on|off} : Set Boot

		fdisk
		cgdisk
	```
	- Create Device Label
		```
		let:
			device_Name = /dev/sdb
			device_Size = 51200MiB (50GB)
			label type = msdos
		```
		parted /dev/sdb mklabel msdos

	- Create Partitions
		```
		Syntax: parted [device_name] mkpart [partition_type] [partition_fileType] [start_size] [end_size]

		Example:
			/dev/sdb1 Boot /mnt/boot primary ext4 0% 	1024MiB	 Bootable
			/dev/sdb2 Root /mnt      primary ext4 1024MiB 	32768MiB
			/dev/sdb3 Home /mnt/home primary ext4 32768MiB	100%
		```
		- Partition 1
			```
			let
			- Partition Type : primary
			- Partition File Type : ext4
			- Partition Start Size : 0% (From the start)
			- Partition End Size : 1024MiB
			```
			parted /dev/sdb mkpart primary ext4 0% 1024MiB

		- Partition 2 
			```
			let
			- Partition Type : primary
			- Partition File Type : ext4
			- Partition Start Size : 1024MiB
			- Partition End Size : 32768MiB
			```
			parted /dev/sdb mkpart primary ext4 1024MiB 32768MiB		

		- Partition 3
			```
			let
			- Partition Type : primary
			- Partition File Type : ext4
			- Partition Start Size : 32768MiB
			- Partition End Size : 100% (To the end)
			```
			parted /dev/sdb mkpart primary ext4 32768MiB 100%
		
	- Format Partitions
		```
		Syntax: 
			# File Type
			- Fat{16|32}
				mkfs.fat -f {16|32} /dev/sdX(n)
			- EXT4
				mkfs.ext4 /dev/sdX(n) 
			- Swap
				mkswap /dev/sdX(n)
		```
		mkfs.ext4 /dev/sdb1
		mkfs.ext4 /dev/sdb2
		mkfs.ext4 /dev/sdb3

	- Set Bootable
		```
		Syntax: parted $device_Name set <partition> boot on
		```
		parted /dev/sdb set 1 boot on

	- (OPTIONAL) Setup Swap Partition
		swapon /dev/sdX(n)
		echo "# -- Swap Partition 1" | tee -a /etc/fstab
		echo "UUID=device_UUID none swap defaults 0 0" | tee -a /etc/fstab


#=====================#
# Step 5: Mount Disks #
#=====================#

- Mount the root volume to /mnt. For example, if the root volume is /dev/sdX2: 
	mount /dev/sdX2 /mnt

- Make other directories (i.e. home)
	- Home directory
		mkdir -p /mnt/home
	- Boot directory
		mkdir -p /mnt/boot/grub

- Mount remaining directories
	mount /dev/sdX3 /mnt/home
	mount /dev/sdX1 /mnt/boot

#=======================================#
# (OPTIONAL) Step 6: Select the mirrors #
#=======================================#

- Edit mirrorlist to get current mirrors
	/etc/pacman.d/mirrorlist

NOTES:
- For some reason, formatting your root partition (/dev/sdX2) as FAT32 has issues with some packages, thus - please try to 
	* Format /dev/sdX2 (your root partition) to ext4 and continue forth

#====================================#
# Step 7: Install Essential Packages #
#====================================#
```
Use the pacstrap(8) script to install the base package, Linux kernel and firmware for common hardware
Also install other additional software
EXAMPLES:
	* nano
	* vim
	* base-devel (For Development)
	* networkmanager (for WIFI)
OPTIONAL:
	* linux-lts 				(kernel)
	* linux-lts-headers
```
pacstrap /mnt base linux linux-firmware <Optional> <additional-packages>

#============================================#
# Step 8: Generate fstab (File System Table) #
#============================================#
```
Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 
```
genfstab -U /mnt >> /mnt/etc/fstab

#================#
# Step 9: Chroot #
#================#
- Change Root into the new system via arch-chroot
	arch-chroot /mnt

- Set Time Zone
	- Search for your Time Zone
		# To get your Region
			ls /usr/share/zoneinfo/

		# To get your City
			ls /usr/share/zoneinfo/<Region>

	- To set your time zone
		ln -sf /usr/share/zoneinfo/<Region>/<City> /etc/localtime

	- Generate /etc/adjtime via hwclock
		hwclock --systohc

- Localization
	- Add Locale
		```
		Edit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. 
		```
		Manual: 
			```
			Uncomment locales and save file
			Locales:
				ie.
					en_US.UTF-8 UTF-8	
					en_SG.UTF-8 UTF-8
			```
			$EDITOR /etc/locale.gen
			>  Uncomment the locale of your choice

		Automatic:
			```
			- To uncomment from locale.gen
				sed -i '/{keyword}/s/^#//g' <file>
			- To comment in locale.gen
				sed -i '/{keyword}/s/^/#/g' <file>
			```
			sed -i '/en_SG.UTF-8/s/^#//g' /etc/locale.gen

	- Generate locales
		locale-gen

	- Set LANG variable according to your locale obtained
		echo "LANG=en_SG.UTF-8" | tee -a /etc/locale.conf

	- (OPTIONAL) If you changed the keyboard layout 
		```
		Make changes persistent in vconsole.conf
		```	
		echo "KEYMAP=<keymap>" | tee -a /etc/vconsole.conf

- Network Configuration
	- Create hostname file
		echo "<Hostname>" | tee -a /etc/hostname

	- Add matching entries to hosts file
		echo "127.0.0.1		localhost" | tee -a /etc/hosts
		echo "::1					localhost" | tee -a /etc/hosts
		echo "127.0.1.1		<Hostname>.localdomain	<Hostname>" | tee -a /etc/hosts

- Initialize RAM File System
	- Create initramfs image
		mkinitcpio -P linux
		mkinitcpio -P linux-lts

- Set Root Password 
	passwd 

- Install Bootloader
	```
	NOTE: 
		* /dev/sdX = your disk name; NOT a partition; i.e. /dev/sdb
	Types of Bootloaders:
		- GRUB
	```
	# IF Bootloader is
	- Grub	
		- (OPTIONAL) Install os-prober
			```
			os-prober will detect other operating systems and automatically add them to the menu
				-  mount the partitions from which the other systems boot. Then re-run grub-mkconfig
				-  If you get the following output: 
				Warning: os-prober will not be executed to detect other bootable partitions 
					then edit /etc/default/grub and add/uncomment: GRUB_DISABLE_OS_PROBER=false
					then try again
			```
			If distro is Arch-Based:
				sudo pacman -S os-prober
		- Install Grub Package
			If distro is Arch-Based:
				sudo pacman -S grub

		- Install Grub Bootloader
			```
			Parameters:
				--target : Your target architecture to build grub in
				--debug : To view sysout messsges
				--boot-directory=/boot/
			```
			grub-install --target=i386-pc --debug (optionals) /dev/sdX

		- Create Grub Config
			grub-mkconfig -o /boot/grub/grub.cfg

	- Syslinux

NOTE:
	- For Remounting
		mount /dev/sdX2 /mnt
		mount /dev/sdX3 /mnt/home
		mount /dev/sdX1 /mnt/boot
	- For Changing to root after mount
		arch-chroot /mnt

#==================================#
# Step 10 : Post-Installation TODO #
#==================================#

- Enable multilib repository
	```
	If you want to run 32-bit application on your 64-bit systems, uncomment/enable the multilib repository to achieve it.

	File: /etc/pacman.conf
	```
	- Manual:
		$EDITOR /etc/pacman.conf

		> Uncomment [multilib]
		> Uncomment include = /etc/pacman.d/mirrorlist

	- Automatic:
		```
		Regex Pattern:
			"/\[multilib\]/,/Include/"
			's/^#//'
		```
		sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

- Set sudo priviledges
	- Manual:
		```
		use 'visudo' to enter the sudo file safely
		- Uncomment to allow members of group wheel to execute any command
		```
		visudo
		> uncomment: %wheel ALL=(ALL) ALL
	- Automatic:
		```
		CHANGELOG:
			ALL=(ALL) => ALL=(ALL:ALL) as of 2022-03-15 update
		```
		sed -i 's/^#\s*\(%wheel\s\+ALL=(ALL:ALL)\s\+ALL\)/\1/' /etc/sudoers

- Administrative Stuff
	- Create user account
		```
		Syntax: useradd -m -g (primary groups (default: <username>)) -G <secondary/supplementary groups (default: wheel)> -d <custom-profile-directory-path> <username>
		Examples:
			useradd -m -g wheel -d /home/profiles/admin admin
			useradd -m -g users -G wheel -d /home/profiles/admin admin
		```
		useradd -m -g wheel -d /home/profiles/user user

	- Set password to username
		passwd <username>

	- Test user
		su - <username>
		sudo whoami

- System Maintenance

	- Setup Swap File
		- Create Swap file
			```
			The “fallocate” program can create swap files faster than “dd”. As an added perk, its syntax is also easier to remember
			NOTE:
				- the swapfile/swap partition size is generally about 2x your pc/laptop's RAM - minimum 4GB as a rule of thumb
			Syntax: fallocate -l <size> /swapfile
			```
			fallocate -l 8.0GiB /swapfile

		- Verify Swap file
			ls -lh /swapfile

		-  Change permission of swapfile to read+write
			chmod 600 /swapfile

		- Make swap file
			mkswap /swapfile

		- Enable swap file to begin using it
			swapon /swapfile
		
		- Add swapfile to File Systems Table (fstab)
			```
			File: /etc/fstab
			- The operating system needs to know that it is safe to use this file for swap every time it boots up
			```
			echo "# /swapfile" | tee -a /etc/fstab
			echo "/swapfile none swap defaults 0 0" | tee -a /etc/fstab


		- EXAMPLE
			```
			let:
				swapfile size = 4GB 
			```
			fallocate -l 4G /swapfile
			chmod 600 /swapfile
			mkswap /swapfile
			swapon /swapfile
			echo "# /swapfile" | tee -a /etc/fstab
			echo "/swapfile none swap defaults 0 0" | tee -a /etc/fstab

		- Remove Swap file
			swapoff /swapfile
			rm -f /swapfile
			remove "/swapfile none swap defaults 0 0" from /etc/fstab


#==================#
# Step 11 : Finale #
#==================#
- After installation : unmount
	umount -l /mnt

#==============================================
# After this point, you can choose to exit or 
#		Install another distro or
# 	Modify
#==============================================

### Extras ###

[Custom Passwords]
root: admin
asura: @rchsur@



